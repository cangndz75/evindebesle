generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionPlan {
  FREE
  PREMIUM
  PRO
}

enum ContactMethod {
  EMAIL
  PHONE
  WHATSAPP
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  MISSED
}

enum DiscountType {
  PERCENT
  AMOUNT
}

enum MediaType {
  PHOTO
  VIDEO
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phone       String?
  districtId  String?
  fullAddress String?
  image       String?
  isAdmin     Boolean  @default(false)

  subscriptionPlan        SubscriptionPlan @default(FREE)
  preferredContactMethod  ContactMethod?
  referralCode            String?
  emailVerified           Boolean          @default(false)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  district    District?   @relation(fields: [districtId], references: [id])
  sessions    Session[]
  accounts    Account[]
  userPets    UserPet[]
  appointments Appointment[]
  userCoupons UserCoupon[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id         String   @id @default(uuid())
  accountId  String
  providerId String
  userId     String
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Pet {
  id        String   @id @default(uuid())
  name      String
  image     String?
  createdAt DateTime @default(now())

  userPets  UserPet[]
}

model UserPet {
  id        String   @id @default(uuid())
  userId    String
  petId     String
  name      String?
  age       Int?
  notes     String?
  createdAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet       Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  price       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  appointmentServices AppointmentService[]
  checkItems          AppointmentCheck[]
}

model Appointment {
  id              String             @id @default(cuid())
  userId          String
  confirmedAt     DateTime           @default(now())
  deliveredAt     DateTime?
  assignedToId    String?
  notes           String?
  status          AppointmentStatus  @default(SCHEDULED)
  summarySent     Boolean            @default(false)
  isRecurring     Boolean            @default(false)
  repeatCount     Int?
  repeatInterval  String?

  user            User               @relation(fields: [userId], references: [id])
  services        AppointmentService[]
  checkItems      AppointmentCheck[]
  media           AppointmentMedia[]
}

model AppointmentService {
  id             String   @id @default(cuid())
  appointmentId  String
  serviceId      String

  appointment    Appointment @relation(fields: [appointmentId], references: [id])
  service        Service     @relation(fields: [serviceId], references: [id])
}

model AppointmentCheck {
  id            String   @id @default(cuid())
  appointmentId String
  serviceId     String
  title         String
  isChecked     Boolean  @default(false)

  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
}

model AppointmentMedia {
  id             String   @id @default(cuid())
  appointmentId  String
  url            String
  type           MediaType
  uploadedAt     DateTime @default(now())

  appointment    Appointment @relation(fields: [appointmentId], references: [id])
}

model District {
  id        String   @id @default(cuid())
  name      String
  city      String
  createdAt DateTime @default(now())

  users     User[]
}

model Coupon {
  id            String   @id @default(cuid())
  code          String   @unique
  description   String?
  discountType  DiscountType
  value         Int
  maxUsage      Int?
  usageCount    Int      @default(0)
  expiresAt     DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())

  userCoupons   UserCoupon[]
}

model UserCoupon {
  id        String   @id @default(cuid())
  userId    String
  couponId  String
  usedAt    DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  coupon    Coupon   @relation(fields: [couponId], references: [id])
}
