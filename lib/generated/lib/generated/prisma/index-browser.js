
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  districtId: 'districtId',
  fullAddress: 'fullAddress',
  image: 'image',
  isAdmin: 'isAdmin',
  subscriptionPlan: 'subscriptionPlan',
  preferredContactMethod: 'preferredContactMethod',
  referralCode: 'referralCode',
  emailVerified: 'emailVerified',
  emailVerifyToken: 'emailVerifyToken',
  emailVerifyExpires: 'emailVerifyExpires',
  marketingEmailConsent: 'marketingEmailConsent',
  profileNoteConsent: 'profileNoteConsent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  image: 'image',
  species: 'species',
  breed: 'breed',
  createdAt: 'createdAt'
};

exports.Prisma.OwnedPetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  petId: 'petId',
  name: 'name',
  age: 'age',
  gender: 'gender',
  image: 'image',
  relation: 'relation',
  allergy: 'allergy',
  sensitivity: 'sensitivity',
  specialNote: 'specialNote',
  allowAdUse: 'allowAdUse',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  price: 'price',
  isActive: 'isActive',
  isWeeklyPopular: 'isWeeklyPopular',
  createdAt: 'createdAt'
};

exports.Prisma.ServicePriceScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  petId: 'petId',
  price: 'price'
};

exports.Prisma.ServiceTagScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  petId: 'petId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userPetId: 'userPetId',
  confirmedAt: 'confirmedAt',
  deliveredAt: 'deliveredAt',
  assignedToId: 'assignedToId',
  status: 'status',
  summarySent: 'summarySent',
  isRecurring: 'isRecurring',
  repeatCount: 'repeatCount',
  repeatInterval: 'repeatInterval',
  userNote: 'userNote',
  allergy: 'allergy',
  sensitivity: 'sensitivity',
  specialRequest: 'specialRequest',
  adminNote: 'adminNote',
  specialRequestStatus: 'specialRequestStatus',
  discountRate: 'discountRate',
  discountReason: 'discountReason',
  ownedPetId: 'ownedPetId'
};

exports.Prisma.AppointmentServiceScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  serviceId: 'serviceId'
};

exports.Prisma.AppointmentCheckScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  serviceId: 'serviceId',
  title: 'title',
  isChecked: 'isChecked',
  note: 'note'
};

exports.Prisma.AppointmentMediaScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  url: 'url',
  type: 'type',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.AppointmentReviewScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.PetReportScalarFieldEnum = {
  id: 'id',
  userPetId: 'userPetId',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  ownedPetId: 'ownedPetId'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subject: 'subject',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  sentAt: 'sentAt',
  retryCount: 'retryCount',
  success: 'success'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subject: 'subject',
  content: 'content',
  sentAt: 'sentAt',
  type: 'type',
  success: 'success'
};

exports.Prisma.AdminDiscountConfigScalarFieldEnum = {
  id: 'id',
  triggerCount: 'triggerCount',
  type: 'type',
  value: 'value',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
};

exports.Prisma.DistrictScalarFieldEnum = {
  id: 'id',
  name: 'name',
  city: 'city',
  createdAt: 'createdAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discountType: 'discountType',
  value: 'value',
  maxUsage: 'maxUsage',
  usageCount: 'usageCount',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserCouponScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  couponId: 'couponId',
  usedAt: 'usedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  PRO: 'PRO'
};

exports.ContactMethod = exports.$Enums.ContactMethod = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  WHATSAPP: 'WHATSAPP'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  MISSED: 'MISSED'
};

exports.MediaType = exports.$Enums.MediaType = {
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENT: 'PERCENT',
  AMOUNT: 'AMOUNT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Pet: 'Pet',
  OwnedPet: 'OwnedPet',
  Service: 'Service',
  ServicePrice: 'ServicePrice',
  ServiceTag: 'ServiceTag',
  Appointment: 'Appointment',
  AppointmentService: 'AppointmentService',
  AppointmentCheck: 'AppointmentCheck',
  AppointmentMedia: 'AppointmentMedia',
  AppointmentReview: 'AppointmentReview',
  PetReport: 'PetReport',
  Feedback: 'Feedback',
  NotificationLog: 'NotificationLog',
  Invoice: 'Invoice',
  EmailLog: 'EmailLog',
  AdminDiscountConfig: 'AdminDiscountConfig',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  District: 'District',
  Coupon: 'Coupon',
  UserCoupon: 'UserCoupon'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
