generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionPlan {
  FREE
  PREMIUM
  PRO
}

enum ContactMethod {
  EMAIL
  PHONE
  WHATSAPP
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  phone           String?
  address         String?
  district        String?
  neighborhood    String?
  street          String?
  building        String?
  subscriptionPlan SubscriptionPlan @default(FREE)
  preferredContactMethod ContactMethod?
  referralCode    String?
  emailVerified   Boolean           @default(false)
  image           String?
  isAdmin         Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  sessions        Session[]
  accounts        Account[]
  pets            Pet[]
  petServices     PetService[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String   @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Pet {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  type      String
  age       Int?
  breed     String?
  notes     String?
  createdAt DateTime @default(now())

  services  PetService[]
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Int      
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  petServices PetService[]
}

model PetService {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId       String
  pet         Pet          @relation(fields: [petId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service      @relation(fields: [serviceId], references: [id])
  status      OrderStatus  @default(PENDING)
  totalAmount Int
  paymentId   String?      
  createdAt   DateTime     @default(now())
}
